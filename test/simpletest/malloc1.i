/* Generated by Frama-C */
typedef unsigned int size_t;
struct data_type {
   int age ;
   char name[20] ;
};
typedef struct data_type data;
struct Sequence {
   int a ;
   data *first ;
   data *last ;
};
typedef struct Sequence Sequence;
extern int printf(char const * __restrict __format , ...);

extern  __attribute__((__nothrow__)) void *malloc(size_t __size) __attribute__((
__malloc__, __leaf__));

extern  __attribute__((__nothrow__)) char *strcpy(char * __restrict __dest,
                                                  char const * __restrict __src) __attribute__((
__nonnull__(1,2), __leaf__));

extern  __attribute__((__nothrow__)) size_t strlen(char const *__s) __attribute__((
__pure__, __nonnull__(1), __leaf__));

void func1(char *p)
{
  /*@ assert rte: mem_access: \valid_read(p+6); */
  printf("the func1 is %c\n",*(p + 6));
  return;
}

void func2(data *p)
{
  /*@ assert rte: mem_access: \valid_read(&p->age); */
  printf("%s is %d years old\n",p->name,p->age);
  return;
}

void func3(char *p1, char *p2)
{
  strcpy(p1,(char const *)p2);
  printf("the string is %s\n",p1);
  return;
}

void func4(Sequence *p)
{
  return;
}

void func5(int *p)
{
  return;
}

int main(void)
{
  int __retres;
  int i;
  int x_size;
  int y_size;
  data *bob;
  Sequence *Se;
  Sequence *Se1;
  Sequence *Se2;
  Sequence *Se3;
  Sequence *Se4;
  Sequence *Se5;
  Sequence *Se6;
  int *Se7;
  int *Se8;
  char *a;
  char *input;
  char *output;
  char *p1;
  char *p2;
  char string[8];
  char *p3;
  size_t tmp_12;
  i = 10;
  x_size = 10;
  y_size = 10;
  bob = (data *)malloc(sizeof(data));
  Se = (Sequence *)malloc(sizeof(Sequence));
  Se2 = (Sequence *)malloc((unsigned int)100 * sizeof(Sequence));
  Se3 = (Sequence *)malloc((unsigned int)i * sizeof(Sequence));
  /*@ assert rte: signed_overflow: -2147483648 ≤ x_size*y_size; */
  /*@ assert rte: signed_overflow: x_size*y_size ≤ 2147483647; */
  Se4 = (Sequence *)malloc((unsigned int)(x_size * y_size) * sizeof(Sequence));
  /*@ assert rte: signed_overflow: -2147483648 ≤ x_size*100; */
  /*@ assert rte: signed_overflow: x_size*100 ≤ 2147483647; */
  Se5 = (Sequence *)malloc((unsigned int)(x_size * 100) * sizeof(Sequence));
  Se6 = (Sequence *)malloc((sizeof(Sequence) * (unsigned int)x_size) * (unsigned int)y_size);
  /*@ assert rte: signed_overflow: -2147483648 ≤ x_size*y_size; */
  /*@ assert rte: signed_overflow: x_size*y_size ≤ 2147483647; */
  Se7 = (int *)malloc((unsigned int)(x_size * y_size));
  Se8 = (int *)malloc((unsigned int)100);
  a = (char *)malloc((unsigned int)100 * sizeof(char));
  input = (char *)malloc((unsigned int)20);
  output = (char *)malloc((unsigned int)20);
  Se1 = (Sequence *)malloc(sizeof(Sequence) * (unsigned int)100);
  if (bob != (void *)0) {
    /*@ assert rte: mem_access: \valid(&bob->age); */
    bob->age = 22;
    strcpy(bob->name,"Robert");
  }
  /*@ assert rte: mem_access: \valid(&Se->a); */
  Se->a = 3;
  /*@ assert rte: mem_access: \valid(&Se->first); */
  Se->first = bob;
  /*@ assert rte: mem_access: \valid_read(&Se->first); */
  printf("the struct is %s\n",(Se->first)->name);
  string[0] = (char)'A';
  string[1] = (char)'S';
  string[2] = (char)'D';
  string[3] = (char)'E';
  string[4] = (char)'S';
  string[5] = (char)'F';
  string[6] = (char)'P';
  string[7] = (char)'\000';
  p3 = (char *)"DKLRTF";
  p1 = string;
  p2 = p3;
  printf("the length of func3 is %d\n",sizeof(bob));
  func1(p1);
  func1(p2);
  /*@ assert rte: mem_access: \valid_read(&Se->first); */
  func1((Se->first)->name);
  func2(bob);
  func4(Se);
  func4(Se1);
  func4(Se2);
  func4(Se3);
  func4(Se4);
  func4(Se5);
  func4(Se6);
  func5(Se7);
  func5(Se8);
  func3(a,p3);
  func3(input,output);
  tmp_12 = strlen((char const *)a);
  printf("the length of func3 is %d\n",tmp_12);
  __retres = 1;
  return __retres;
}


