/* Generated by Frama-C */
struct __anonstruct___mpz_struct_1 {
   int _mp_alloc ;
   int _mp_size ;
   unsigned long *_mp_d ;
};
typedef struct __anonstruct___mpz_struct_1 __mpz_struct;
typedef __mpz_struct ( __attribute__((__FC_BUILTIN__)) mpz_t)[1];
typedef unsigned int size_t;
/*@ requires predicate ≢ 0;
    assigns \nothing; */
extern  __attribute__((__FC_BUILTIN__)) void e_acsl_assert(int predicate,
                                                           char *kind,
                                                           char *fct,
                                                           char *pred_txt,
                                                           int line);

/*@
model __mpz_struct { ℤ n };
*/
int __fc_random_counter __attribute__((__unused__));
unsigned long const __fc_rand_max = (unsigned long)32767;
/*@ ghost extern int __fc_heap_status; */

/*@
axiomatic
  dynamic_allocation {
  predicate is_allocable{L}(size_t n) 
    reads __fc_heap_status;
  
  }
 */
/*@ assigns \result \from *((char *)ptr+(0..size-1)); */
extern  __attribute__((__FC_BUILTIN__)) void *__store_block(void *ptr,
                                                            size_t size);

/*@ assigns \nothing; */
extern  __attribute__((__FC_BUILTIN__)) void __delete_block(void *ptr);

/*@ assigns \nothing; */
extern  __attribute__((__FC_BUILTIN__)) void __initialize(void *ptr,
                                                          size_t size);

/*@ assigns \nothing; */
extern  __attribute__((__FC_BUILTIN__)) void __full_init(void *ptr);

/*@ assigns \nothing; */
extern  __attribute__((__FC_BUILTIN__)) void __literal_string(void *ptr);

/*@ ensures \result ≡ 0 ∨ \result ≡ 1;
    ensures \result ≡ 1 ⇒ \valid((char *)\old(ptr)+(0..\old(size)-1));
    assigns \result \from *((char *)ptr+(0..size-1));
 */
extern  __attribute__((__FC_BUILTIN__)) int __valid(void *ptr, size_t size);

/*@ ensures \result ≡ 0 ∨ \result ≡ 1;
    ensures
      \result ≡ 1 ⇒ \valid_read((char *)\old(ptr)+(0..\old(size)-1));
    assigns \result \from *((char *)ptr+(0..size-1));
 */
extern  __attribute__((__FC_BUILTIN__)) int __valid_read(void *ptr,
                                                         size_t size);

/*@ assigns __e_acsl_internal_heap;
    assigns __e_acsl_internal_heap \from __e_acsl_internal_heap;
 */
extern  __attribute__((__FC_BUILTIN__)) void __e_acsl_memory_clean(void);

extern size_t __memory_size;

/*@
predicate diffSize{L1, L2}(ℤ i) =
  \at(__memory_size,L1)-\at(__memory_size,L2) ≡ i;
 */
/*@ assigns \at(\result,Post) \from *__format; */
extern int printf(char const * __restrict __format , ...);

_Bool conver(int *d, int *b)
{
  _Bool __retres;
  int i;
  int c[5];
  __store_block((void *)(& d),4U);
  __store_block((void *)(& b),4U);
  i = 0;
  while (i < 5) {
    /*@ assert rte: mem_access: \valid(d+i); */
    {
      int __e_acsl_valid;
      __e_acsl_valid = __valid((void *)(d + i+2),sizeof(int));
      e_acsl_assert(__e_acsl_valid,(char *)"Assertion",(char *)"conver",
                    (char *)"rte: mem_access: \\valid(d+i)",11);
    }
    /*@ assert rte: mem_access: \valid_read(b+i); */
    {
      int __e_acsl_valid_read;
      __e_acsl_valid_read = __valid_read((void *)(b + i+2),sizeof(int));
      e_acsl_assert(__e_acsl_valid_read,(char *)"Assertion",(char *)"conver",
                    (char *)"rte: mem_access: \\valid_read(b+i)",12);
    }
    __initialize((void *)(d + i),sizeof(int));
    *(d + i) = *(b + i);
    /*@ assert rte: index_bound: 0 ≤ i; */
    e_acsl_assert(0 <= i,(char *)"Assertion",(char *)"conver",
                  (char *)"rte: index_bound: 0 <= i",14);
    /*@ assert rte: index_bound: i < 5; */
    e_acsl_assert(i < 5,(char *)"Assertion",(char *)"conver",
                  (char *)"rte: index_bound: i < 5",15);
    /*@ assert rte: mem_access: \valid_read(b+i); */
    {
      int __e_acsl_valid_read_2;
      __e_acsl_valid_read_2 = __valid_read((void *)(b + i),sizeof(int));
      e_acsl_assert(__e_acsl_valid_read_2,(char *)"Assertion",
                    (char *)"conver",
                    (char *)"rte: mem_access: \\valid_read(b+i)",16);
    }
    c[i] = *(b + i);
    /*@ assert rte: signed_overflow: i+1 ≤ 2147483647; */
    e_acsl_assert((long long)i + (long long)1 <= (long long)2147483647,
                  (char *)"Assertion",(char *)"conver",
                  (char *)"rte: signed_overflow: i+1 <= 2147483647",18);
    i ++;
  }
  __retres = (_Bool)1;
  __delete_block((void *)(& d));
  __delete_block((void *)(& b));
  return __retres;
}

static int a[10];
void __e_acsl_memory_init(void)
{
  __store_block((void *)(a),40U);
  return;
}

int main(void)
{
  char *__e_acsl_literal_string;
  int __retres;
  int i;
  int num[5];
  _Bool tmp;
  __e_acsl_memory_init();
  __store_block((void *)(num),20U);
  __initialize((void *)(num),sizeof(int));
  num[0] = 1;
  __initialize((void *)(& num[1]),sizeof(int));
  num[1] = 2;
  __initialize((void *)(& num[2]),sizeof(int));
  num[2] = 3;
  __initialize((void *)(& num[3]),sizeof(int));
  num[3] = 4;
  __initialize((void *)(& num[4]),sizeof(int));
  num[4] = 5;
  tmp = conver(a,num);
  if (tmp) {
    i = 0;
    while (i < 5) {
      /*@ assert rte: index_bound: 0 ≤ i; */
      e_acsl_assert(0 <= i,(char *)"Assertion",(char *)"main",
                    (char *)"rte: index_bound: 0 <= i",41);
      /*@ assert rte: index_bound: i < 10; */
      e_acsl_assert(i < 10,(char *)"Assertion",(char *)"main",
                    (char *)"rte: index_bound: i < 10",42);
      __e_acsl_literal_string = "%d  ";
      __store_block((void *)__e_acsl_literal_string,sizeof("%d  "));
      __full_init((void *)__e_acsl_literal_string);
      __literal_string((void *)__e_acsl_literal_string);
      printf(__e_acsl_literal_string,a[i]);
      /*@ assert rte: signed_overflow: i+1 ≤ 2147483647; */
      e_acsl_assert((long long)i + (long long)1 <= (long long)2147483647,
                    (char *)"Assertion",(char *)"main",
                    (char *)"rte: signed_overflow: i+1 <= 2147483647",44);
      i ++;
    }
  }
  __retres = 1;
  __delete_block((void *)(a));
  __delete_block((void *)(num));
  __e_acsl_memory_clean();
  return __retres;
}


