/* Generated by Frama-C */
typedef unsigned int size_t;
struct data_type {
   int age ;
   char name[20] ;
};
typedef struct data_type data;
extern int printf(char const * __restrict __format , ...);

extern  __attribute__((__nothrow__)) void *malloc(size_t __size) __attribute__((
__malloc__, __leaf__));

extern  __attribute__((__nothrow__)) char *strcpy(char * __restrict __dest,
                                                  char const * __restrict __src) __attribute__((
__nonnull__(1,2), __leaf__));

extern  __attribute__((__nothrow__)) size_t strlen(char const *__s) __attribute__((
__pure__, __nonnull__(1), __leaf__));

void func1(char *p)
{
  size_t tmp;
  tmp = strlen((char const *)p);
  printf("the length of func1 is %d\n",tmp);
  /*@ assert rte: mem_access: \valid_read(p+4); */
  printf("%c\n",*(p + 4));
  return;
}

void func2(data **p)
{
  /*@ assert rte: mem_access: \valid_read(p+0); */
  /*@ assert rte: mem_access: \valid_read(p+0); */
  /*@ assert rte: mem_access: \valid_read(&(*(p+0))->age); */
  printf("%s is %d years old\n",(*(p + 0))->name,(*(p + 0))->age);
  return;
}

void func4(data *p)
{
  /*@ assert rte: mem_access: \valid_read(&p->age); */
  printf("%s is %d years old\n",p->name,p->age);
  return;
}

void func3(char *p1, char *p2)
{
  size_t tmp;
  size_t tmp_0;
  tmp = strlen((char const *)p1);
  printf("the length of func3 is %d\n",tmp);
  strcpy(p1,(char const *)p2);
  tmp_0 = strlen((char const *)p2);
  printf("the length of func3 is %d\n",tmp_0);
  printf("the string is %s\n",p1);
  return;
}

int main(void)
{
  int __retres;
  int i;
  data *bob[100];
  data *bob1;
  char string[8];
  char *a;
  char *p1;
  char *p2;
  char *p3;
  string[0] = (char)'A';
  string[1] = (char)'S';
  string[2] = (char)'D';
  string[3] = (char)'E';
  string[4] = (char)'S';
  string[5] = (char)'F';
  string[6] = (char)'P';
  string[7] = (char)'\000';
  a = (char *)malloc((unsigned int)100 * sizeof(char));
  i = 2;
  i = 0;
  while (i < 100) {
    bob1 = (data *)malloc((unsigned int)100 * sizeof(data));
    if (bob1 != (void *)0) {
      /*@ assert rte: mem_access: \valid(&bob1->age); */
      bob1->age = i;
      strcpy(bob1->name,"Robert");
      /*@ assert rte: index_bound: 0 ≤ i; */
      /*@ assert rte: index_bound: i < 100; */
      bob[i] = bob1;
    }
    /*@ assert rte: signed_overflow: i+1 ≤ 2147483647; */
    i ++;
  }
  i = 0;
  while (i < 10) {
    /*@ assert rte: index_bound: 0 ≤ i; */
    /*@ assert rte: index_bound: i < 100; */
    /*@ assert rte: index_bound: 0 ≤ i; */
    /*@ assert rte: index_bound: i < 100; */
    /*@ assert rte: mem_access: \valid_read(&(bob[i])->age); */
    printf("%s %d\n",(bob[i])->name,(bob[i])->age);
    /*@ assert rte: signed_overflow: i+1 ≤ 2147483647; */
    i ++;
  }
  p3 = (char *)"DKLRTF";
  p1 = & string[5];
  p2 = p3;
  func2(& bob1);
  func4(bob1);
  __retres = 1;
  return __retres;
}


