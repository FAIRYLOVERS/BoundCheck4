/* Generated by Frama-C */
struct __anonstruct_s_6 {
   int u[12] ;
};
struct _s {
   int t[15] ;
   struct __anonstruct_s_6 s ;
   struct _s *next ;
};
typedef struct _s ts;
int t[10];
int u[8 + 3];
int v[16][17];
ts s;
unsigned int c[10];
int main(void)
{
  int __retres;
  int i;
  int j;
  unsigned int k;
  {
    /*undefined sequence*/
    {
      /*undefined sequence*/
      k = (unsigned int)1;
      j = (int)k;
    }
    i = j;
  }
  t[0] = 0;
  u[1] = 0;
  v[2][3] = 0;
  s.t[1] = 0;
  s.s.u[2] = 0;
  /*@ assert rte: mem_access: \valid(&(s.next)->t[4]); */
  (s.next)->t[4] = 0;
  /*@ assert rte: index_bound: 0 ≤ i; */
  /*@ assert rte: index_bound: i < 10; */
  t[i] = 0;
  /*@ assert rte: index_bound: 0 ≤ i; */
  /*@ assert rte: index_bound: i < (int)(8+3); */
  u[i] = 0;
  /*@ assert rte: index_bound: 0 ≤ i; */
  /*@ assert rte: index_bound: i < 16; */
  /*@ assert rte: index_bound: 0 ≤ j; */
  /*@ assert rte: index_bound: j < 17; */
  v[i][j] = 0;
  /*@ assert rte: index_bound: 0 ≤ i; */
  /*@ assert rte: index_bound: i < 15; */
  s.t[i] = 0;
  /*@ assert rte: index_bound: 0 ≤ i; */
  /*@ assert rte: index_bound: i < 12; */
  s.s.u[i] = 0;
  /*@ assert rte: index_bound: 0 ≤ j; */
  /*@ assert rte: index_bound: j < 15; */
  /*@ assert rte: mem_access: \valid(&(s.next)->t[j]); */
  (s.next)->t[j] = 0;
  /*@ assert rte: index_bound: k < 10; */
  t[k] = 0;
  /*@ assert rte: index_bound: k < (int)(8+3); */
  u[k] = 0;
  /*@ assert rte: index_bound: k < 16; */
  /*@ assert rte: index_bound: c[k] < 17; */
  /*@ assert rte: index_bound: k < 10; */
  v[k][c[k]] = 0;
  /*@ assert rte: index_bound: k < 15; */
  s.t[k] = 0;
  /*@ assert rte: index_bound: k < 12; */
  s.s.u[k] = 0;
  /*@ assert rte: index_bound: c[k] < 15; */
  /*@ assert rte: mem_access: \valid(&(s.next)->t[c[k]]); */
  /*@ assert rte: index_bound: k < 10; */
  (s.next)->t[c[k]] = 0;
  /*@ assert rte: index_bound: k < 10; */
  c[k] = (unsigned int)0;
  __retres = 0;
  return __retres;
}


