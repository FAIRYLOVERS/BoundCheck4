/* +++Date last modified: 05-Jul-1997 */

/*
**  BITCNTS.C - Test program for bit counting functions
**
**  public domain by Bob Stout & Auke Reitsma
*/

#include <stdio.h>
#include <stdlib.h>
#include "conio.h"
#include <limits.h>
#include <time.h>
#include <float.h>
#include "bitops.h"

#define FUNCS  7

static int CDECL bit_shifter(long int x);

int main(int argc, char *argv[])
{
  clock_t start;
__boundcheck_metadata_store((void *)(&start),(void *)((size_t)(&start)+sizeof(start)*8-1));
clock_t stop;
__boundcheck_metadata_store((void *)(&stop),(void *)((size_t)(&stop)+sizeof(stop)*8-1));

  double ct;
__boundcheck_metadata_store((void *)(&ct),(void *)((size_t)(&ct)+sizeof(ct)*8-1));
double cmin = DBL_MAX;
__boundcheck_metadata_store((void *)(&cmin),(void *)((size_t)(&cmin)+sizeof(cmin)*8-1));
double cmax = 0;
__boundcheck_metadata_store((void *)(&cmax),(void *)((size_t)(&cmax)+sizeof(cmax)*8-1));

  int i;
__boundcheck_metadata_store((void *)(&i),(void *)((size_t)(&i)+sizeof(i)*8-1));
int cminix;
__boundcheck_metadata_store((void *)(&cminix),(void *)((size_t)(&cminix)+sizeof(cminix)*8-1));
int cmaxix;
__boundcheck_metadata_store((void *)(&cmaxix),(void *)((size_t)(&cmaxix)+sizeof(cmaxix)*8-1));

  long j;
__boundcheck_metadata_store((void *)(&j),(void *)((size_t)(&j)+sizeof(j)*8-1));
long n;
__boundcheck_metadata_store((void *)(&n),(void *)((size_t)(&n)+sizeof(n)*8-1));
long seed;
__boundcheck_metadata_store((void *)(&seed),(void *)((size_t)(&seed)+sizeof(seed)*8-1));

  int iterations;
__boundcheck_metadata_store((void *)(&iterations),(void *)((size_t)(&iterations)+sizeof(iterations)*8-1));

  static int (* CDECL pBitCntFunc[FUNCS])(long) = {
    bit_count,
    bitcount,
    ntbl_bitcnt,
    ntbl_bitcount,
    /*            btbl_bitcnt, DOESNT WORK*/
    BW_btbl_bitcount,
    AR_btbl_bitcount,
    bit_shifter
  };
__boundcheck_metadata_store((void *)(&pBitCntFunc),(void *)((size_t)(&pBitCntFunc)+sizeof(pBitCntFunc)*8-1));

  char *__tmp_string_6="Shift and count bits";
 __boundcheck_metadata_store((void *)(__tmp_string_6),(void *)(__tmp_string_6+20));
char *__tmp_string_5="Non-recursive bit count by bytes (AR)";
 __boundcheck_metadata_store((void *)(__tmp_string_5),(void *)(__tmp_string_5+37));
char *__tmp_string_4="Non-recursive bit count by bytes (BW)";
 __boundcheck_metadata_store((void *)(__tmp_string_4),(void *)(__tmp_string_4+37));
char *__tmp_string_3="Non-recursive bit count by nybbles";
 __boundcheck_metadata_store((void *)(__tmp_string_3),(void *)(__tmp_string_3+34));
char *__tmp_string_2="Recursive bit count by nybbles";
 __boundcheck_metadata_store((void *)(__tmp_string_2),(void *)(__tmp_string_2+30));
char *__tmp_string_1="Ratko's mystery algorithm";
 __boundcheck_metadata_store((void *)(__tmp_string_1),(void *)(__tmp_string_1+25));
char *__tmp_string_0="Optimized 1 bit/loop counter";
 __boundcheck_metadata_store((void *)(__tmp_string_0),(void *)(__tmp_string_0+28));
static char *text[FUNCS] = {
"Optimized 1 bit/loop counter",
    "Ratko's mystery algorithm",
    "Recursive bit count by nybbles",
    "Non-recursive bit count by nybbles",
    /*            "Recursive bit count by bytes",*/
    "Non-recursive bit count by bytes (BW)",
    "Non-recursive bit count by bytes (AR)",
    "Shift and count bits"
  };
__boundcheck_metadata_store((void *)(&text),(void *)((size_t)(&text)+sizeof(text)*8-1));

  if (argc<2) {
    fprintf(stderr,"Usage: bitcnts <iterations>\n");
    exit(-1);
	}
  iterations=atoi(argv[1]);
  
  puts("Bit counter algorithm benchmark\n");
  
  for (i = 0; i < FUNCS; i++) {
    start = clock();
    
    for (j = n = 0, seed = rand(); j < iterations; j++, seed += 13)
	 n += pBitCntFunc[_RV_insert_check(0,7,60,20,"main",i)](seed);
    
    stop = clock();
    ct = (stop - start) / (double)CLOCKS_PER_SEC;
    if (ct < cmin) {
	 cmin = ct;
	 cminix = i;
    }
    if (ct > cmax) {
	 cmax = ct;
	 cmaxix = i;
    }
    
    printf("%-38s> Time: %7.3f sec.; Bits: %ld\n", text[_RV_insert_check(0,7,73,57,"main",i)], ct, n);
  }
  printf("\nBest  > %s\n", text[_RV_insert_check(0,7,75,33,"main",cminix)]);
  printf("Worst > %s\n", text[_RV_insert_check(0,7,76,31,"main",cmaxix)]);
  return 0;
}

static int CDECL bit_shifter(long int x)
{
  int i;
__boundcheck_metadata_store((void *)(&i),(void *)((size_t)(&i)+sizeof(i)*8-1));
int n;
__boundcheck_metadata_store((void *)(&n),(void *)((size_t)(&n)+sizeof(n)*8-1));

  
  for (i = n = 0; x && (i < (sizeof(long) * CHAR_BIT)); ++i, x >>= 1)
    n += (int)(x & 1L);
  return n;
}
